<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Game.CSharp</name>
    </assembly>
    <members>
        <member name="T:Game.NavmeshAgent">
            <summary>
            NavmeshAgent is a script/component that allows to set the destination and calculation of a path of an AI agent inside a Navmesh
            </summary>
        </member>
        <member name="M:Game.NavmeshAgent.SetDestination(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Attempts to calculate a path, returning true if one is found and false if none was found
            </summary>
        </member>
        <member name="M:Game.NavmeshAgent.MoveAlongPath">
            <summary>
            Moves Actor along path.
            <para> Returns true if agent is moving, and false if there is no path or if the agent has reached its destination </para> 
            </summary>
        </member>
        <member name="T:Game.Extensions">
            <summary>
            Useful or missing extensions for the Flax Engine
            </summary>
        </member>
        <member name="M:Game.Extensions.FindScriptInParent``1(FlaxEngine.Actor)">
            <summary>
            Recursively searches for a script of type T in the parent hierarchy of the provided actor.
            </summary>
        </member>
        <member name="M:Game.Extensions.FindScriptInParent``1(FlaxEngine.Actor,System.Int32)">
            <summary>
            Finds a script of type T in the parent hierarchy of the provided actor.
            </summary>
        </member>
        <member name="M:Game.Extensions.FindScriptsInChildren``1(FlaxEngine.Actor)">
            <summary>
            Finds all script components of type T in the children hierarchy of the provided actor.
            </summary>
        </member>
        <member name="M:Game.Extensions.HasAnyTag(FlaxEngine.Actor,FlaxEngine.Tag[])">
            <summary>
            Checks if an actor has any of the specified tags from an array of Tag objects.
            </summary>
        </member>
        <member name="M:Game.Extensions.HasAnyTag(FlaxEngine.Actor,System.String[])">
            <summary>
            Checks if an actor has any of the specified tags from an array of string Tags.
            </summary>
        </member>
        <member name="T:CustomEvent">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="M:CustomEvent.AddListener(System.Action)">
            <summary>
            Subscribes a class method to this event
            </summary>
        </member>
        <member name="M:CustomEvent.RemoveListener(System.Action)">
            <summary>
            Removes the subscription of a class method to this event
            </summary>
        </member>
        <member name="M:CustomEvent.ClearAllListeners">
            <summary>
            Removes all subscribers of this event
            </summary>
        </member>
        <member name="T:CustomEvent`1">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`2">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`3">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`4">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`5">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`6">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`7">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`8">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`9">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`10">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`11">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`12">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`13">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`14">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`15">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="T:CustomEvent`16">
            <summary>
            Custom event implementation that allows subscribing, unsubscribing, and invoking event listeners.
            </summary>
        </member>
        <member name="M:Randomize.Range(System.Int32,System.Int32)">
            <summary>
            Return a random integer value between or equals to the Min and Max values
            </summary>
        </member>
        <member name="M:Randomize.Range(System.Single,System.Single)">
            <summary>
            Return a random float value between or equals to the Min and Max values
            </summary>
        </member>
        <member name="M:Randomize.RandomInsideUnitCircle">
            <summary>
            Generates a random value inside a unit circle
            </summary>
        </member>
        <member name="M:Randomize.RandomOutsideUnitCircle">
            <summary>
            Generates a random point on the surface of a unit circle
            </summary>
        </member>
        <member name="M:Randomize.RandomInsideUnitSphere">
            <summary>
            Generates a random Vector3 point inside a unit sphere
            </summary>
        </member>
        <member name="M:Randomize.RandomOutsideUnitSphere">
            <summary>
            Generates a random point on the surface of a unit sphere
            </summary>
        </member>
    </members>
</doc>
